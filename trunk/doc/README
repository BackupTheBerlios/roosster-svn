README
======

Rosster is very simple.
Give it a URL, and rosster fetches the URL's content, wether it's a HTTP URL or
any other URL, stores and indexes it. Then you can retrieve entries by URL
or you can search all entries, you ever addded to roosster's index.

That's about it.

For the latest version and news about roosster go to http://roosster.org


DETAILS
=======

Roosster is a java command-line application. It will support a web-interface
in some later version, but for now (version 0.1), it's only possible to use
roosster as a CLI application.
It's conveniently (if one can call a CLI application convenient) packaged
into a single .jar file, so you can basically call roosster like this:

java -jar roosster.jar <command>

where <command> is one of the available commands. In version 0.1 the following
commands are supported (use them without the single quotes on invocation):

- 'entry' : for getting a single entry, identified by it's URL (the -url parameter
            is mandatory)
            Example:
            java -jar roosster.jar entry -url http://example.com/test.html

- 'search' : for searching through your indexed entries. The query-string has to
             be provided as follows:
             Example:
             java -jar roosster.jar search -query "ibook apple"

             This query looks for entries, that have the words 'ibook' and 'apple'
             in their content.
             As roosster is based on Jakarta Lucene, take a look at
             http://jakarta.apache.org/lucene/docs/queryparsersyntax.html for
             a complete reference of the supported query syntax

             Roosster currently supports searching in the following distinct
             document fields: content, title, issued, url, author, authormail,
                              lastmod, lastfetch and all (which is the default field)

- 'addurl' : Adds the specified URL (specified via the -url parameter) to the index.
             If there is already an entry with the same URL, roosster will fail.
             You can override this (which effectively deletes the already stored
             entry, before adding the new), by setting the -force parameter to
             '1' or 'true' (as always, without the quotes).

- 'addfile' : Add the file specified by the -file parameter (relative or absolute)
              to the index. Like 'addurl', this will fail (which can be overridden),
              if the file was already added to the index.

- 'addfeed' : Add the atom feed specified by the -url parameter to the index.
              Like 'addurl', this will fail any of the URL's contained in the
              feeds, was added to the index already. If the -update parameter is
              '1' or 'true', roosster will fetch all URL's content in the feed.
              Depending on the entry-count of the feed, this could take some
              while.
- 'addrss' :  Add the RSS 1.0 feed specified by the -url parameter to the index.
              Behaves exactly like the 'addfeed' command, except, that it parses
              RSS 1.0 feeds instead of atom feeds.

- 'del' :   Deletes the entry specified by the -url parameter from the index


This is just the basic functionality. You could easily write you own commands for
roosster, this is actually very simple. You can override any of roosster's
standard options by providing it as an command line option (preceeded by a single
or double slash), or by providing a roosster invocation, with a -conf option
that specified a properties file, that contains all configuration options.

Output mode:
Roosster's internal representation of information is agnostic to the output format.
This makes it easy to output, for example a search query's result, in different
formats.
As of version 0.1 rosster supports two output formats: Text and Atom.
Text is optimized for console viewing, while Atom provides the flexibility to
further process the output (for example, via XSLT).
The default output mode is text. Simply set the parameter (on the command line,
or in a custom property file, see above) 'output.mode' to 'atom' to change this.
NOTE that the output in atom format applies to the latest draft (as of this writing)
of the atom spec found at
http://atompub.org/2004/10/20/draft-ietf-atompub-format-03.html
Due to the nature of "search results" it's quite difficult though to produce
"valid" feeds, which doesn't happen at this time.


