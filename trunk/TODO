Web Interface
=========
* LATER make extended search interface
* LATER mass delete
* implement and show search history 
* let user choose 'limit' in paging
* add select box for selecting sort order
* add authentication option
* show users for which creation of XmlHttpRequest object fails (and Safari)
  a message, that it won't work
* implement recent (with recent.html just including search)
* link to feeds in web interface
* put all valid destinations in class and access only fields of this class?
* add buttons for changing textarea size

* DONE implement delete functionality 
* DONE put Delete link on Entry detail page
* DONE make image for non-public entries
* DONE add link to URL to every view of Entry
* DONE show small note somewhere on screen, when waiting for server 
  (like Gmail's 'Loading ...')
* DONE make bookmarklet, to add a url (server fetches content and stores
  it), then jump directly to edit tab
* DONE display pager in search, implement EntryList for that
* DONE show overflowing area with content of URL (hide it by default, but offer switch 
  to show and edit it)
* DONE handle exceptions better (DuplicateEntryException),
* DONE make dates a link to search for this date
* DONE catch pressing enter keys in form to not send page
* DONE add output messages facility
* DONE display "no selected entry" in edit tab (or don't display tab at all?)
* DONE implement Entry.attachAsEditForm() and Entry.asDomDocument()
* DONE place only url text input field onto add-tab
* DONE implement tabbed display (search,add,edit,tags) 
* DONE add a selected entry variable, edit-tab displays always selected entry 
* DONE use init() to jump directly into a tab 



API
=========
* implement tag fetching
* configurable authentication
* make sure response codes are correct 
* implement tag API

* DONE implement api method to retrieve number of entries (integrated in entrylist)
* DONE implement command to fetch only raw contents of entry
* DONE remove roosster servlet from web.xml
* DONE get rid of JDOM use in EntryGenerator


General
=========
* LATER Thinlet GUI http://thinlet.sf.net/ GUI Editor http://thing.sourceforge.net/
* LATER use some kind of ErrorListener instead of ServletMapper.wrapProcessRequest() ?
* look at all TODO comments in sourcecode
* update roosster.app.version property
* move to MultiFieldQueryParser, remove Entry.ALL
* document when RAW is set, and what it means if it's not set
* handle Frames in HTMLProcessor see http://javaboutique.internet.com/tutorials/HTMLParser/article.html
* implement ContentTypeProcessor chains, should be triggered when certain 
  mime types are encountered
* implement property to enable forcing of a certain ContentTypeProcessor
* rewrite raw content to reflect image locations ...
* finish SyncDeliciousCommand
* implement HitList (see Otis mail) and make it return Entry objects
  (instantiated on the fly), use this in EntryList.class
* add property for HtmlMode template suffix/prefix
* use file locking in Configuration.persist() ?
* make duplicate entry handling more sane
* extend XmlProcessor.class to use EntryParser.class
* implement InvalidRequestException to give meaningful error messages in case of 
  wrong/missing arguments

* DONE add property delicious.api.endpoint
* DONE implement get/setJumpTo in Output.class
* DONE overload EntryStore.getAllEntries() 
* DONE add public/private flag to Entry.class
* DONE add setOutputProperty(String, Object) and respective getter to Output.class
  and use it to pass request to Templates in HtmlMode
* DONE make logging configurable by CLI switch
* DONE FIX THE FUCKING LOGGING ... I HATE COMMONS LOGGING
* DONE extend Entry so that content field contains only meaningful (no
  markup) text, while adding a new (unindexed, stored) field to
  Entry.class text, Return this "raw" field when cached contents is
  requested
* DONE parse Content's encoding properly out of Content-type header field
* DONE parse title from HTML into Entry.title
* DONE use HTML parser (jtidy or jsoup) to process HTML before adding
* DONE handle RAW field in XmlProcessor


Scratchpad Feature:
====================

* - make own url scheme
- add boolean attribute to Entry.class,
-  add search option (on extra page), to search only standalone notes,
-  show only standalone notes, add new tab for that


maybe
-  implement new Entry class, make Entry an interface and let the new  and old Entry class implement it
- this would make a Factory necessary,  Commons Discovery?





